{
    "name": "train-cnn-chip-classifier",
    "version": "0.0.4",
    "description": "Train a convolutional neural network binary classifier on labeled chips produced from chip-from-vrt",
    "properties": {
        "isPublic": true,
        "timeout": 172800
    },
    "inputPortDescriptors": [
        {
            "name": "chips",
            "type": "directory",
            "description": "Contains GeoTiff chips on which to train the classifier. This should be the output from the chip-from-vrt task.",
            "required": true
        },
        {
            "name": "max_side_dim",
            "type": "string",
            "description": "Int: the maximum acceptable side dimension (in pixels) for training polygons. Defaults to 150. This will be the input side dimension to the network unless 'resize-dim' is set.",
            "required": false
        },
        {
            "name": "min_side_dim",
            "type": "string",
            "description": "Int: the minimum acceptable side dimension (in pixels) for training polygons. Defaults to 0.",
            "required": false
        },
        {
            "name": "classes",
            "type": "string",
            "description": "String: classes to train network on, each separated by a comma (e.g- 'No swimming pool, Swimming pool'). Must be exactly as they appear in the class_name property of the polygon feature in the geojson that was input to chip-from-vrt.",
            "required": true
        },
        {
            "name": "two_rounds",
            "type": "string",
            "description": "Bool: train the network in two rounds- first on balanced classes then on the original distribution of classes. In the second training round only the weights of the final layer of the model will be updated. Recommended if there is class imbalance in the dataset. Defaults to False.",
            "required": false
        },
        {
            "name": "train_size",
            "type": "string",
            "description": "Int: number of polygons to train the network on for the first round of training. Defaults to 10000.",
            "required": false
        },
        {
            "name": "train_size_2",
            "type": "string",
            "description": "Int: number of polygons to train on in the second round of training. Only relevant if two_rounds is True. Defualts to half of train size.",
            "required": false
        },
        {
            "name": "batch_size",
            "type": "string",
            "description": "Int: number of chips to train on per batch. Defaults to 32.",
            "required": false
        },
        {
            "name": "nb_epoch",
            "type": "string",
            "description": "Int: number of training epochs to perform for the first round of training. Defualts to 35.",
            "required": false
        },
        {
            "name": "nb_epoch_2",
            "type": "string",
            "description": "Int: Number of training epochs to perform for the second round of training. Only relevant if two_rounds is True. Defaults to 8.",
            "required": false
        },
        {
            "name": "test",
            "type": "string",
            "description": "Bool: if True testing will be completed on a subset of polygons. A test report with accuracy metrics will be saved as a text file in the 'model' output directory. Defaults to True.",
            "required": false
        },
        {
            "name": "test_size",
            "type": "string",
            "description": "Int: number of chips to test on. Only relevant if test is 'True'. Defualts to 1000.",
            "required": false
        },
        {
            "name": "learning_rate",
            "type": "string",
            "description": "Int: Learning rate for the first round of training. defaults to 0.001",
            "required": false
        },
        {
            "name": "learning_rate_2",
            "type": "string",
            "description": "Int: Learning rate for the second round of training (if applicable). defaults to 0.01",
            "required": false
        },
        {
            "name": "max_pixel_intensity",
            "type": "string",
            "description": "Int: Maximum intensity of pixels in chips (ie. 2 ** bit_depth - 1). Defaults to 255.",
            "required": false
        },
        {
            "name": "kernel_size",
            "type": "string",
            "description": "Int: Side dimension (in pixels) of the kernels at each convolutional layer in the network. Defaults to 3.",
            "required": false
        },
        {
            "name": "small_model",
            "type": "string",
            "description": "Bool: Use a model with 8 layers instead of 16. Useful for large input images (>200 pixels). Defaults to False.",
            "required": false
        },
        {
            "name": "resize_dim",
            "type": "string",
            "description": "Int: Dimension to resize the chip side dimension to after padding. This should be smaller than max_side_dim. Defaults to None.",
            "required": false
        },
        {
            "name": "use_lowest_val_loss",
            "type": "string",
            "description": "Bool: After the first round of training use the model weights that yielded the lowest validation loss (recommended). Otherwise the model weights after the final epoch will be used. Defaults to True.",
            "required": false
        }
    ],
    "outputPortDescriptors": [
        {
            "name": "trained_model",
            "type": "directory",
            "description": "The fully trained model saved as an h5 file. Models after all epochs will be saved in a subdirectory called model_weights, with the format epoch{n}_{validation_loss}.h5, where n is the epoch that produced the weights. This directory will also contain a test report, which will only have accuracy metrics if train is True."
        }
    ],
    "containerDescriptors": [
        {
            "type": "DOCKER",
            "properties": {
                "image": "platformstories/train-cnn-chip-classifier",
                "domain": "nvidiagpu"
            },
            "command": "python /train-cnn-chip-classifier.py",
            "isPublic": true
        }
    ]
}
